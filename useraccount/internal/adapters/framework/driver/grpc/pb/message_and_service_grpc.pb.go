// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: message_and_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExistCRUDClient is the client API for ExistCRUD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExistCRUDClient interface {
	AddNewPersonInfo(ctx context.Context, in *PersonInfoRequest, opts ...grpc.CallOption) (*Response, error)
	UpdatePersonInfo(ctx context.Context, in *EditPersonInfoParameters, opts ...grpc.CallOption) (*Response, error)
	FindPersonInfo(ctx context.Context, in *NationalIDNumber, opts ...grpc.CallOption) (*PersonInfoResponse, error)
}

type existCRUDClient struct {
	cc grpc.ClientConnInterface
}

func NewExistCRUDClient(cc grpc.ClientConnInterface) ExistCRUDClient {
	return &existCRUDClient{cc}
}

func (c *existCRUDClient) AddNewPersonInfo(ctx context.Context, in *PersonInfoRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ExistCRUD/AddNewPersonInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *existCRUDClient) UpdatePersonInfo(ctx context.Context, in *EditPersonInfoParameters, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ExistCRUD/UpdatePersonInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *existCRUDClient) FindPersonInfo(ctx context.Context, in *NationalIDNumber, opts ...grpc.CallOption) (*PersonInfoResponse, error) {
	out := new(PersonInfoResponse)
	err := c.cc.Invoke(ctx, "/pb.ExistCRUD/FindPersonInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExistCRUDServer is the server API for ExistCRUD service.
// All implementations must embed UnimplementedExistCRUDServer
// for forward compatibility
type ExistCRUDServer interface {
	AddNewPersonInfo(context.Context, *PersonInfoRequest) (*Response, error)
	UpdatePersonInfo(context.Context, *EditPersonInfoParameters) (*Response, error)
	FindPersonInfo(context.Context, *NationalIDNumber) (*PersonInfoResponse, error)
	mustEmbedUnimplementedExistCRUDServer()
}

// UnimplementedExistCRUDServer must be embedded to have forward compatible implementations.
type UnimplementedExistCRUDServer struct {
}

func (UnimplementedExistCRUDServer) AddNewPersonInfo(context.Context, *PersonInfoRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewPersonInfo not implemented")
}
func (UnimplementedExistCRUDServer) UpdatePersonInfo(context.Context, *EditPersonInfoParameters) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonInfo not implemented")
}
func (UnimplementedExistCRUDServer) FindPersonInfo(context.Context, *NationalIDNumber) (*PersonInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPersonInfo not implemented")
}
func (UnimplementedExistCRUDServer) mustEmbedUnimplementedExistCRUDServer() {}

// UnsafeExistCRUDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExistCRUDServer will
// result in compilation errors.
type UnsafeExistCRUDServer interface {
	mustEmbedUnimplementedExistCRUDServer()
}

func RegisterExistCRUDServer(s grpc.ServiceRegistrar, srv ExistCRUDServer) {
	s.RegisterService(&ExistCRUD_ServiceDesc, srv)
}

func _ExistCRUD_AddNewPersonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExistCRUDServer).AddNewPersonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExistCRUD/AddNewPersonInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExistCRUDServer).AddNewPersonInfo(ctx, req.(*PersonInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExistCRUD_UpdatePersonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPersonInfoParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExistCRUDServer).UpdatePersonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExistCRUD/UpdatePersonInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExistCRUDServer).UpdatePersonInfo(ctx, req.(*EditPersonInfoParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExistCRUD_FindPersonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalIDNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExistCRUDServer).FindPersonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExistCRUD/FindPersonInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExistCRUDServer).FindPersonInfo(ctx, req.(*NationalIDNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// ExistCRUD_ServiceDesc is the grpc.ServiceDesc for ExistCRUD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExistCRUD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ExistCRUD",
	HandlerType: (*ExistCRUDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewPersonInfo",
			Handler:    _ExistCRUD_AddNewPersonInfo_Handler,
		},
		{
			MethodName: "UpdatePersonInfo",
			Handler:    _ExistCRUD_UpdatePersonInfo_Handler,
		},
		{
			MethodName: "FindPersonInfo",
			Handler:    _ExistCRUD_FindPersonInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message_and_service.proto",
}
